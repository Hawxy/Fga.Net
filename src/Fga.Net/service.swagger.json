{
  "swagger": "2.0",
  "info": {
    "title": "Auth0 Fine Grained Authorization (FGA)",
    "description": "Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.\n\nThe limits and information described in this document is subject to change.",
    "version": "0.1",
    "contact": {
      "name": "Auth0 Labs",
      "url": "https://twitter.com/auth0lab"
    }
  },
  "tags": [
    {
      "name": "auth0_fga"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/stores/{store_id}/assertions/{authorization_model_id}": {
      "get": {
        "summary": "Read assertions for an authorization model ID",
        "description": "The GET assertions API will return, for a given authorization model id, all the assertions stored for it. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false. ",
        "operationId": "auth0_fga_ReadAssertions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ReadAssertionsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "401": {
            "description": "Request failed due to authentication errors. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "429": {
            "description": "Request failed due to too many requests. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Request failed due to internal server error. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization_model_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Assertions"
        ],
        "security": [
          {
            "ClientCredentials": [
              "read:assertions"
            ]
          }
        ]
      },
      "put": {
        "summary": "Upsert assertions for an authorization model ID",
        "description": "The POST assertions API will add new assertions for an authorization model id, or overwrite the existing ones. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false. ",
        "operationId": "auth0_fga_WriteAssertions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/WriteAssertionsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "401": {
            "description": "Request failed due to authentication errors. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "429": {
            "description": "Request failed due to too many requests. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Request failed due to internal server error. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization_model_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WriteAssertionsRequestParams"
            }
          }
        ],
        "tags": [
          "Assertions"
        ],
        "security": [
          {
            "ClientCredentials": [
              "write:assertions"
            ]
          }
        ]
      }
    },
    "/stores/{store_id}/authorization-models": {
      "get": {
        "summary": "Return all the authorization model IDs for a particular store",
        "description": "The GET authorization-models API will return all the IDs of the authorization models for a certain store.\nPath parameter `store_id` is required.\nAuth0 FGA's response will contain an array of all authorization model IDs, sorted in descending order of creation.\n\n## [Limits](https://docs.fga.dev/intro/dashboard#limitations)\n- Each store has a limit of **30** read authorization-models requests per minute (RPM).\n- Each response can contain up to **50** authorization model IDs.\n## Example\nAssume that the store's authorization model has been configured twice.  To get all the IDs of the authorization models that had been created in this store, call GET authorization-models.  The API will return a response that looks like:\n```json\n{\n  \"authorization_model_ids\": [\n      \"1yunpF9DkzXMzm0dHrsCuWsooEV\",\n      \"1yundoHpJHlodgn4EOVar2DhmKp\"\n  ]\n}\n```\nIf there are more authorization model IDs available, the response will contain an extra field `continuation_token`:\n```json\n{\n  \"authorization_model_ids\": [\n      \"1yunpF9DkzXMzm0dHrsCuWsooEV\",\n      \"1yundoHpJHlodgn4EOVar2DhmKp\"\n  ],\n  \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\"\n}\n```\n",
        "operationId": "auth0_fga_ReadAuthorizationModels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ReadAuthorizationModelsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "401": {
            "description": "Request failed due to authentication errors. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "429": {
            "description": "Request failed due to too many requests. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Request failed due to internal server error. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "continuation_token",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Store Models"
        ],
        "security": [
          {
            "ClientCredentials": [
              "read:authorization_models"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a new authorization model",
        "description": "The POST authorization-model API will update the authorization model for a certain store.\nPath parameter `store_id` and `type_definitions` array in the body are required.  Each item in the `type_definitions` array is a type definition as specified in the field `type_definition`.\nThe response will return the authorization model's ID in the `id` field.\n\n## [Limits](https://docs.fga.dev/intro/dashboard#limitations)\n- There can be at most **24** items in the type_definitions array.\n- Each store has a limit of **10** POST authorization-models requests per minute (RPM).\n## Example\nTo update the authorization model with a single `document` authorization model, call POST authorization-models API with the body: \n```json\n{\n  \"type_definitions\":[\n    {\n      \"type\":\"document\",\n      \"relations\":{\n        \"reader\":{\n          \"union\":{\n            \"child\":[\n              {\n                \"this\":{\n\n                }\n              },\n              {\n                \"computedUserset\":{\n                  \"object\":\"\",\n                  \"relation\":\"writer\"\n                }\n              }\n            ]\n          }\n        },\n        \"writer\":{\n          \"this\":{\n\n          }\n        }\n      }\n    }\n  ]\n}\n```\nAuth0 FGA's response will include the version id for this authorization model, which will look like \n```\n{\"authorization_model_id\": \"1yunpF9DkzXMzm0dHrsCuWsooEV\"}\n```\n",
        "operationId": "auth0_fga_WriteAuthorizationModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/WriteAuthorizationModelResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "401": {
            "description": "Request failed due to authentication errors. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "429": {
            "description": "Request failed due to too many requests. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Request failed due to internal server error. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TypeDefinitions"
            }
          }
        ],
        "tags": [
          "Store Models"
        ],
        "security": [
          {
            "ClientCredentials": [
              "write:authorization_models"
            ]
          }
        ]
      }
    },
    "/stores/{store_id}/authorization-models/{id}": {
      "get": {
        "summary": "Return a particular version of an authorization model",
        "description": "The GET authorization-models by ID API will return a particular version of authorization model that had been configured for a certain store.  \nPath parameter `store_id` and `id` are required.\nThe response will return the authorization model for the particular version.\n\n## [Limits](https://docs.fga.dev/intro/dashboard#limitations)\n- Each store has a limit of **30** read authorization-models requests per minute (RPM).\n## Example\nTo retrieve the authorization model with ID `1yunpF9DkzXMzm0dHrsCuWsooEV` for the store, call the GET authorization-models by ID API with `1yunpF9DkzXMzm0dHrsCuWsooEV` as the `id` path parameter.  The API will return:\n```json\n{\n  \"authorization_model\":{\n    \"id\":\"1yunpF9DkzXMzm0dHrsCuWsooEV\",\n    \"type_definitions\":[\n      {\n        \"type\":\"document\",\n        \"relations\":{\n          \"reader\":{\n            \"union\":{\n              \"child\":[\n                {\n                  \"this\":{}\n                },\n                {\n                  \"computedUserset\":{\n                    \"object\":\"\",\n                    \"relation\":\"writer\"\n                  }\n                }\n              ]\n            }\n          },\n          \"writer\":{\n            \"this\":{}\n          }\n        }\n      }\n    ]\n  }\n}\n```\nIn the above example, there is only 1 type (`document`) with 2 relations (`writer` and `reader`).",
        "operationId": "auth0_fga_ReadAuthorizationModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ReadAuthorizationModelResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "401": {
            "description": "Request failed due to authentication errors. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "429": {
            "description": "Request failed due to too many requests. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Request failed due to internal server error. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Store Models"
        ],
        "security": [
          {
            "ClientCredentials": [
              "read:authorization_models"
            ]
          }
        ]
      }
    },
    "/stores/{store_id}/check": {
      "post": {
        "summary": "Check whether a user is authorized to access an object",
        "description": "The check API will return whether the user has a certain relationship with an object in a certain store.\nPath parameter `store_id` as well as body parameter `object`, `relation` and `user` are all required.\nThe response will return whether the relationship exists in the field `allowed`.\n\n## [Limits](https://docs.fga.dev/intro/dashboard#limitations)\n- Each store has a limit of **25** check requests per second (RPS).\n## Example\nIn order to check if user `anne@auth0.com` has an owner relationship with object document:2021-budget, a check API call should be fired with the following body\n```json\n{\n  \"tuple_key\": {\n    \"user\": \"anne@auth0.com\"\n    \"relation\": \"owner\"\n    \"object\": \"document:2021-budget\",\n  }\n}\n```\nAuth0 FGA's response will include `{ \"allowed\": true }` if there is a relationship and `{ \"allowed\": false }` if there isn't.",
        "operationId": "auth0_fga_Check",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CheckResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "401": {
            "description": "Request failed due to authentication errors. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "429": {
            "description": "Request failed due to too many requests. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Request failed due to internal server error. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckRequestParams"
            }
          }
        ],
        "tags": [
          "Tuples"
        ],
        "security": [
          {
            "ClientCredentials": [
              "check:tuples"
            ]
          }
        ]
      }
    },
    "/stores/{store_id}/expand": {
      "post": {
        "summary": "Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship",
        "description": "The expand API will return all users (including user and userset) that have certain relationship with an object in a certain store.\nThis is different from the `/stores/{store_id}/read` API in that both users and computed references are returned.\nPath parameter `store_id` as well as body parameter `object`, `relation` are all required.\nThe response will return a userset tree whose leaves are the user id and usersets.  Union, intersection and difference operator are located in the intermediate nodes.\n\n## [Limits](https://docs.fga.dev/intro/dashboard#limitations)\n- Each store has a limit of **30** expand requests per minute (RPM).\n## Example\nAssume the following type definition for document:\n```yaml\n  type document\n    relations\n      define reader as self or writer\n      define writer as self\n```\nIn order to expand all users that have `reader` relationship with object `document:2021-budget`, an expand API call should be fired with the following body\n```json\n{\n  \"tuple_key\": {\n    \"object\": \"document:2021-budget\",\n    \"relation\": \"reader\"\n  }\n}\n```\nAuth0 FGA's response will be a userset tree of the users and computed usersets that have read access to the document.\n```json\n{\n  \"tree\":{\n    \"root\":{\n      \"type\":\"document:2021-budget#reader\",\n      \"union\":{\n        \"nodes\":[\n          {\n            \"type\":\"document:2021-budget#reader\",\n            \"leaf\":{\n              \"users\":{\n                \"users\":[\n                  \"bob@auth0.com\"\n                ]\n              }\n            }\n          },\n          {\n            \"type\":\"document:2021-budget#reader\",\n            \"leaf\":{\n              \"computed\":{\n                \"userset\":\"document:2021-budget#writer\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\nThe caller can then call expand API for the `writer` relationship for the `document:2021-budget`.",
        "operationId": "auth0_fga_Expand",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ExpandResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "401": {
            "description": "Request failed due to authentication errors. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "429": {
            "description": "Request failed due to too many requests. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Request failed due to internal server error. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExpandRequestParams"
            }
          }
        ],
        "tags": [
          "Debugging"
        ],
        "security": [
          {
            "ClientCredentials": [
              "expand:tuples"
            ]
          }
        ]
      }
    },
    "/stores/{store_id}/read": {
      "post": {
        "summary": "Get tuples from the store that matches a query, without following userset rewrite rules",
        "description": "The POST read API will return the tuples for a certain store that matches a query filter specified in the body. Tuples and type definitions allow Auth0 FGA to determine whether a relationship exists between an object and an user.\nIt is different from the `/stores/{store_id}/expand` API in that only read returns relationship tuples that are stored in the system and satisfy the query.\nIt does not expand or traverse the graph by taking the authorization model into account.Path parameter `store_id` is required.  In the body:\n1. Object is mandatory. An object can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`).\n2. User is mandatory in the case the object is type only.\n## [Limits](https://docs.fga.dev/intro/dashboard#limitations)\n- Each store has a limit of **5** read requests per second (RPS).\n## Examples\n### Query for all objects in a type definition\nTo query for all objects that `bob@auth0.com` has `reader` relationship in the document type definition, call read API with body of\n```json\n{\n \"tuple_key\": {\n     \"user\": \"bob@auth0.com\"\n     \"relation\": \"reader\",\n     \"object\": \"document:\",\n  }\n}\n```\nThe API will return tuples and an optional continuation token, something like\n```json\n{\n  \"tuples\": [\n    {\n      \"key\": {\n        \"user\": \"bob@auth0.com\",\n        \"relation\": \"reader\",\n        \"object\": \"document:2021-budget\"\n      },\n      \"timestamp\": \"2021-10-06T15:32:11.128Z\"\n    }\n  ]\n}\n```\nThis means that `bob@auth0.com` has a `reader` relationship with 1 document `document:2021-budget`.\n### Query for all users with particular relationships for a particular document\nTo query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of \n```json\n{\n  \"tuple_key\": {\n     \"object\": \"document:2021-budget\",\n     \"relation\": \"reader\"\n   }\n}\n```\nThe API will return something like \n```json\n{\n  \"tuples\": [\n    {\n      \"key\": {\n        \"user\": \"bob@auth0.com\"\n        \"relation\": \"reader\",\n        \"object\": \"document:2021-budget\",\n      },\n      \"timestamp\": \"2021-10-06T15:32:11.128Z\"\n    }\n  ]\n}\n```\nThis means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`).  Note that the API will not return writers such as `anne@auth0.com` even when all writers are readers.  This is because only direct relationship are returned for the READ API.\n### Query for all users with all relationships for a particular document\nTo query for all users that have any relationship with `document:2021-budget`, call read API with body of \n```json\n{\n  \"tuple_key\": {\n      \"object\": \"document:2021-budget\"\n   }\n}\n```\nThe API will return something like \n```json\n{\n  \"tuples\": [\n    {\n      \"key\": {\n        \"user\": \"anne@auth0.com\"\n        \"relation\": \"writer\",\n        \"object\": \"document:2021-budget\",\n      },\n      \"timestamp\": \"2021-10-05T13:42:12.356Z\"\n    },\n    {\n      \"key\": {\n        \"user\": \"bob@auth0.com\"\n        \"relation\": \"reader\",\n        \"object\": \"document:2021-budget\",\n      },\n      \"timestamp\": \"2021-10-06T15:32:11.128Z\"\n    }\n  ]\n}\n```\nThis means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`) and 1 `writer` (`anne@auth0.com`).\n",
        "operationId": "auth0_fga_Read",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ReadResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "401": {
            "description": "Request failed due to authentication errors. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "429": {
            "description": "Request failed due to too many requests. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Request failed due to internal server error. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReadRequestParams"
            }
          }
        ],
        "tags": [
          "Tuples"
        ],
        "security": [
          {
            "ClientCredentials": [
              "read:tuples"
            ]
          }
        ]
      }
    },
    "/stores/{store_id}/read-tuples": {
      "post": {
        "summary": "ReadTuples should only be used for the playground. do not enable it for prod deployments",
        "operationId": "auth0_fga_ReadTuples",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ReadTuplesResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "401": {
            "description": "Request failed due to authentication errors. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "429": {
            "description": "Request failed due to too many requests. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Request failed due to internal server error. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReadTuplesRequestParams"
            }
          }
        ],
        "tags": [
          "auth0_fga"
        ],
        "security": [
          {
            "ClientCredentials": [
              "read:tuples"
            ]
          }
        ]
      }
    },
    "/stores/{store_id}/settings": {
      "get": {
        "summary": "Return store settings, including the environment tag",
        "description": "The GET settings API will return the store's settings, including environment tag and an array of Auth0 FGA's allowed 3rd party token issuers. The environment tag is used to differentiate between development, staging, and production environments.  \nPath parameter `store_id` is required.\n## Example\nGET settings API's response looks like:\n```json\n{\n  \"environment\":\"STAGING\",\n  \"token_issuers\":[\n    {\n      \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",\n      \"issuer_url\":\"https://example.issuer.com\"\n    }\n  ]\n}\n```\nIn the above response, the store is configured as STAGING and there is one allowed 3rd party token issuer `https://example.issuer.com`.",
        "operationId": "auth0_fga_ReadSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ReadSettingsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "401": {
            "description": "Request failed due to authentication errors. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "429": {
            "description": "Request failed due to too many requests. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Request failed due to internal server error. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings"
        ],
        "security": [
          {
            "ClientCredentials": [
              "read:settings"
            ]
          }
        ]
      },
      "patch": {
        "summary": "Update the environment tag for a store",
        "description": "The PATCH settings API will update the environment tag to differentiate between development, staging, and production environments.\nPath parameter `store_id` is required.\nThe response will return the updated environment tag as well as other configuration settings.\n\n## Example\nTo update store's environment tag to `STAGING`, call PATCH settings API with the following with the body: \n```json\n{\"environment\": \"STAGING\"}\n```\n",
        "operationId": "auth0_fga_WriteSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/WriteSettingsResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "401": {
            "description": "Request failed due to authentication errors. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "429": {
            "description": "Request failed due to too many requests. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Request failed due to internal server error. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WriteSettingsRequestParams"
            }
          }
        ],
        "tags": [
          "Settings"
        ],
        "security": [
          {
            "ClientCredentials": [
              "write:settings"
            ]
          }
        ]
      }
    },
    "/stores/{store_id}/settings/token-issuers": {
      "post": {
        "summary": "Add 3rd party token issuer for Auth0 FGA read and write operations",
        "description": "The POST token-issuers API will configure system so that tokens issued by the specified 3rd party token issuer will be allowed for Auth0 FGA's read and write operations.  Otherwise, only tokens issued by Auth0 FGA's issuer (such as `sandcastle.us.auth0.com` and `sandcastle-dev.us.auth0.com`) are accepted by Auth0 FGA stores API.  Other tokens issued by providers external to Auth0 FGA will be rejected.\nAn example use case is to have browsers directly calling Auth0 FGA API.\nPath parameter `store_id` as well as body parameter `issuer_url` are all required.\n## Example\nTo allow tokens issued by the 3rd party token issuer `https://example.issuer.com` for Auth0 FGA's read and write operations:\n1. In the 3rd party issuer, configure Auth0 FGA API with the following audience in its issuer configuration: `https://api.us1.fga.dev`.\n2. Call POST token-issuers API with the body: `{\"issuer_url\": \"https://example.issuer.com\"}`\n\nAuth0 FGA's response will be the id that is associated with the token issuer as in:\n```json\n{\n  \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\"\n}\n```\n",
        "operationId": "auth0_fga_WriteTokenIssuer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/WriteTokenIssuersResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "401": {
            "description": "Request failed due to authentication errors. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "429": {
            "description": "Request failed due to too many requests. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Request failed due to internal server error. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WriteTokenIssuersRequestParams"
            }
          }
        ],
        "tags": [
          "Settings"
        ],
        "security": [
          {
            "ClientCredentials": [
              "write:settings"
            ]
          }
        ]
      }
    },
    "/stores/{store_id}/settings/token-issuers/{id}": {
      "delete": {
        "summary": "Remove 3rd party token issuer for Auth0 FGA read and write operation",
        "description": "The DELETE token-issuers API will remove the 3rd party token issuer as a token issuer that is allowed by Auth0 FGA. The specified id is the id associated with the issuer url that is to be removed.\nPath parameter `store_id` and `id` are all required.\n## Example\nTo remove the 3rd party token issuer `https://example.issuer.com` (which has the id `0ujsszwN8NRY24YaXiTIE2VWDTS`), call DELETE token-issuers API with the path parameter id `0ujsszwN8NRY24YaXiTIE2VWDTS`.",
        "operationId": "auth0_fga_DeleteTokenIssuer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "400": {
            "description": "Request failed due to invalid input. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "401": {
            "description": "Request failed due to authentication errors. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "429": {
            "description": "Request failed due to too many requests. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Request failed due to internal server error. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Id of token issuer to be removed",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings"
        ],
        "security": [
          {
            "ClientCredentials": [
              "write:settings"
            ]
          }
        ]
      }
    },
    "/stores/{store_id}/write": {
      "post": {
        "summary": "Add or delete tuples from the store",
        "description": "The POST write API will update the tuples for a certain store.  Tuples and type definitions allow Auth0 FGA to determine whether a relationship exists between an object and an user.\nPath parameter `store_id` is required.  In the body, `writes` adds new tuples while `deletes` remove existing tuples.  `lock_tuple` is reserved for future use. \n## [Limits](https://docs.fga.dev/intro/dashboard#limitations)\n- Each write API call allows at most **25** tuples.\n- Each store has a limit of **50000** tuples.\n- Each store has a limit of **1** write requests per second (RPS).\n## Example\n### Adding relationships\nTo add `anne@auth0.com` as a `writer` for `document:2021-budget`, call write API with the following \n```json\n{\n  \"writes\": {\n    \"tuple_keys\": [\n      {\n        \"user\": \"anne@auth0.com\"\n        \"relation\": \"writer\",\n        \"object\": \"document:2021-budget\",\n      }\n    ]\n  }\n}\n```\n### Removing relationships\nTo remove `bob@auth0.com` as a `reader` for `document:2021-budget`, call write API with the following \n```json\n{\n  \"deletes\": {\n    \"tuple_keys\": [\n      {\n        \"user\": \"bob@auth0.com\"\n        \"relation\": \"reader\",\n        \"object\": \"document:2021-budget\",\n      }\n    ]\n  }\n}\n```\n",
        "operationId": "auth0_fga_Write",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/WriteResponse"
            }
          },
          "400": {
            "description": "Request failed due to invalid input. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "401": {
            "description": "Request failed due to authentication errors. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "Request failed due to incorrect path. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "429": {
            "description": "Request failed due to too many requests. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Request failed due to internal server error. Error codes are based on gRPC error codes. Details can be found in https://grpc.github.io/grpc/core/md_doc_statuscodes.html",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WriteRequestParams"
            }
          }
        ],
        "tags": [
          "Tuples"
        ],
        "security": [
          {
            "ClientCredentials": [
              "write:tuples"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "Any": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "Assertion": {
      "type": "object",
      "properties": {
        "tuple_key": {
          "$ref": "#/definitions/TupleKey"
        },
        "expectation": {
          "type": "boolean"
        }
      },
      "required": [
        "tuple_key",
        "expectation"
      ]
    },
    "AuthorizationModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type_definitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TypeDefinition"
          }
        }
      }
    },
    "CheckRequestParams": {
      "type": "object",
      "example": {
        "tuple_key": {
          "user": "anne@auth0.com",
          "relation": "owner",
          "object": "document:2021-budget"
        },
        "authorization_model_id": "1yunpF9DkzXMzm0dHrsCuWsooEV"
      },
      "properties": {
        "tuple_key": {
          "$ref": "#/definitions/TupleKey"
        },
        "authorization_model_id": {
          "type": "string"
        },
        "trace": {
          "type": "boolean",
          "description": "Defaults to false. Making it true has performance implications.",
          "readOnly": true
        }
      }
    },
    "CheckResponse": {
      "type": "object",
      "example": {
        "allowed": true
      },
      "properties": {
        "allowed": {
          "type": "boolean"
        },
        "resolution": {
          "type": "string",
          "description": "For internal use only."
        }
      }
    },
    "Computed": {
      "type": "object",
      "properties": {
        "userset": {
          "type": "string"
        }
      }
    },
    "DirectUserset": {
      "type": "object",
      "description": "A DirectUserset is a sentinel message for referencing\nthe direct members specified by an object/relation mapping."
    },
    "Environment": {
      "type": "string",
      "enum": [
        "ENVIRONMENT_UNSPECIFIED",
        "DEVELOPMENT",
        "STAGING",
        "PRODUCTION"
      ],
      "default": "ENVIRONMENT_UNSPECIFIED"
    },
    "ExpandRequestParams": {
      "type": "object",
      "example": {
        "tuple_key": {
          "object": "document:2021-budget",
          "relation": "reader"
        },
        "authorization_model_id": "1yunpF9DkzXMzm0dHrsCuWsooEV"
      },
      "properties": {
        "tuple_key": {
          "$ref": "#/definitions/TupleKey"
        },
        "authorization_model_id": {
          "type": "string"
        }
      }
    },
    "ExpandResponse": {
      "type": "object",
      "properties": {
        "tree": {
          "$ref": "#/definitions/UsersetTree"
        }
      }
    },
    "Leaf": {
      "type": "object",
      "properties": {
        "users": {
          "$ref": "#/definitions/Users"
        },
        "computed": {
          "$ref": "#/definitions/Computed"
        },
        "tupleToUserset": {
          "$ref": "#/definitions/UsersetTree.TupleToUserset"
        }
      },
      "description": "A leaf node contains either \n- a set of users (which may be individual users, or usersets\n  referencing other relations)\n- a computed node, which is the result of a computed userset\n  value in the authorization model\n- a tupleToUserset nodes, containing the result of expanding\n  a tupleToUserset value in a authorization model."
    },
    "Node": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "leaf": {
          "$ref": "#/definitions/Leaf"
        },
        "difference": {
          "$ref": "#/definitions/UsersetTree.Difference"
        },
        "union": {
          "$ref": "#/definitions/Nodes"
        },
        "intersection": {
          "$ref": "#/definitions/Nodes"
        }
      }
    },
    "Nodes": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Node"
          }
        }
      }
    },
    "ObjectRelation": {
      "type": "object",
      "properties": {
        "object": {
          "type": "string"
        },
        "relation": {
          "type": "string"
        }
      }
    },
    "ReadAssertionsResponse": {
      "type": "object",
      "properties": {
        "authorization_model_id": {
          "type": "string"
        },
        "assertions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Assertion"
          }
        }
      }
    },
    "ReadAuthorizationModelResponse": {
      "type": "object",
      "properties": {
        "authorization_model": {
          "$ref": "#/definitions/AuthorizationModel"
        }
      }
    },
    "ReadAuthorizationModelsResponse": {
      "type": "object",
      "properties": {
        "authorization_model_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "continuation_token": {
          "type": "string"
        }
      }
    },
    "ReadRequestParams": {
      "type": "object",
      "example": {
        "tuple_key": {
          "user": "bob@auth0.com",
          "relation": "reader",
          "object": "document:2021-budget"
        },
        "authorization_model_id": "1yunpF9DkzXMzm0dHrsCuWsooEV",
        "page_size": 50,
        "continuation_token": "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ=="
      },
      "properties": {
        "tuple_key": {
          "$ref": "#/definitions/TupleKey"
        },
        "authorization_model_id": {
          "type": "string"
        },
        "page_size": {
          "type": "integer",
          "format": "int32"
        },
        "continuation_token": {
          "type": "string"
        }
      }
    },
    "ReadResponse": {
      "type": "object",
      "example": {
        "tuples": [
          {
            "key": {
              "user": "bob@auth0.com",
              "relation": "reader",
              "object": "document:2021-budget"
            },
            "timestamp": "2021-10-06T15:32:11.128Z"
          }
        ]
      },
      "properties": {
        "tuples": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tuple"
          }
        },
        "continuation_token": {
          "type": "string"
        }
      }
    },
    "ReadSettingsResponse": {
      "type": "object",
      "example": {
        "environment": "STAGING",
        "token_issuers": [
          {
            "id": "0ujsszwN8NRY24YaXiTIE2VWDTS",
            "issuer_url": "https://example.issuer.com"
          }
        ]
      },
      "properties": {
        "environment": {
          "$ref": "#/definitions/Environment"
        },
        "token_issuers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenIssuer"
          }
        }
      }
    },
    "ReadTuplesRequestParams": {
      "type": "object",
      "properties": {
        "page_size": {
          "type": "integer",
          "format": "int32"
        },
        "continuation_token": {
          "type": "string"
        }
      }
    },
    "ReadTuplesResponse": {
      "type": "object",
      "example": {
        "tuples": [
          {
            "key": {
              "user": "bob@auth0.com",
              "relation": "reader",
              "object": "document:2021-budget"
            },
            "timestamp": "2021-10-06T15:32:11.128Z"
          }
        ],
        "continuation_token": "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ=="
      },
      "properties": {
        "tuples": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tuple"
          }
        },
        "continuation_token": {
          "type": "string"
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Any"
          }
        }
      }
    },
    "TokenIssuer": {
      "type": "object",
      "example": {
        "id": "0ujsszwN8NRY24YaXiTIE2VWDTS",
        "issuer_url": "https://example.issuer.com"
      },
      "properties": {
        "id": {
          "type": "string"
        },
        "issuer_url": {
          "type": "string"
        }
      }
    },
    "Tuple": {
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/TupleKey"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TupleKey": {
      "type": "object",
      "example": {
        "user": "bob@auth0.com",
        "relation": "reader",
        "object": "document:2021-budget"
      },
      "properties": {
        "object": {
          "type": "string",
          "maxLength": 256
        },
        "relation": {
          "type": "string",
          "maxLength": 50
        },
        "user": {
          "type": "string",
          "maxLength": 512
        }
      }
    },
    "TupleKeys": {
      "type": "object",
      "properties": {
        "tuple_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TupleKey"
          },
          "maximum": 25,
          "minimum": 1
        }
      },
      "required": [
        "tuple_keys"
      ]
    },
    "TypeDefinition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "relations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Userset"
          }
        }
      },
      "required": [
        "type",
        "relations"
      ]
    },
    "TypeDefinitions": {
      "type": "object",
      "properties": {
        "type_definitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TypeDefinition"
          },
          "minimum": 1
        }
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Userset": {
      "type": "object",
      "properties": {
        "this": {
          "$ref": "#/definitions/DirectUserset"
        },
        "computedUserset": {
          "$ref": "#/definitions/ObjectRelation"
        },
        "tupleToUserset": {
          "$ref": "#/definitions/authorizationmodel.TupleToUserset"
        },
        "union": {
          "$ref": "#/definitions/Usersets"
        },
        "intersection": {
          "$ref": "#/definitions/Usersets"
        },
        "difference": {
          "$ref": "#/definitions/authorizationmodel.Difference"
        }
      }
    },
    "UsersetTree": {
      "type": "object",
      "properties": {
        "root": {
          "$ref": "#/definitions/Node"
        }
      },
      "description": "A UsersetTree contains the result of an Expansion."
    },
    "UsersetTree.Difference": {
      "type": "object",
      "properties": {
        "base": {
          "$ref": "#/definitions/Node"
        },
        "subtract": {
          "$ref": "#/definitions/Node"
        }
      }
    },
    "UsersetTree.TupleToUserset": {
      "type": "object",
      "properties": {
        "tupleset": {
          "type": "string"
        },
        "computed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Computed"
          }
        }
      }
    },
    "Usersets": {
      "type": "object",
      "properties": {
        "child": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Userset"
          }
        }
      }
    },
    "WriteAssertionsRequestParams": {
      "type": "object",
      "properties": {
        "assertions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Assertion"
          },
          "maximum": 100
        }
      },
      "required": [
        "assertions"
      ]
    },
    "WriteAssertionsResponse": {
      "type": "object"
    },
    "WriteAuthorizationModelResponse": {
      "type": "object",
      "example": {
        "authorization_model_id": "1yunpF9DkzXMzm0dHrsCuWsooEV"
      },
      "properties": {
        "authorization_model_id": {
          "type": "string"
        }
      }
    },
    "WriteRequestParams": {
      "type": "object",
      "properties": {
        "writes": {
          "$ref": "#/definitions/TupleKeys"
        },
        "deletes": {
          "$ref": "#/definitions/TupleKeys"
        },
        "authorization_model_id": {
          "type": "string"
        },
        "lock_tuple": {
          "$ref": "#/definitions/Tuple",
          "title": "for future support",
          "readOnly": true
        }
      }
    },
    "WriteResponse": {
      "type": "object"
    },
    "WriteSettingsRequestParams": {
      "type": "object",
      "example": {
        "environment": "STAGING"
      },
      "properties": {
        "environment": {
          "$ref": "#/definitions/Environment"
        }
      }
    },
    "WriteSettingsResponse": {
      "type": "object",
      "example": {
        "environment": "STAGING",
        "token_issuers": [
          {
            "id": "0ujsszwN8NRY24YaXiTIE2VWDTS",
            "issuer_url": "https://example.issuer.com"
          }
        ]
      },
      "properties": {
        "environment": {
          "$ref": "#/definitions/Environment"
        },
        "token_issuers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenIssuer"
          }
        }
      }
    },
    "WriteTokenIssuersRequestParams": {
      "type": "object",
      "example": {
        "issuer_url": "https://example.issuer.com"
      },
      "properties": {
        "issuer_url": {
          "type": "string"
        }
      }
    },
    "WriteTokenIssuersResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "authorizationmodel.Difference": {
      "type": "object",
      "properties": {
        "base": {
          "$ref": "#/definitions/Userset"
        },
        "subtract": {
          "$ref": "#/definitions/Userset"
        }
      },
      "required": [
        "base",
        "subtract"
      ]
    },
    "authorizationmodel.TupleToUserset": {
      "type": "object",
      "properties": {
        "tupleset": {
          "$ref": "#/definitions/ObjectRelation",
          "title": "The target object/relation"
        },
        "computedUserset": {
          "$ref": "#/definitions/ObjectRelation"
        }
      }
    }
  },
  "securityDefinitions": {
    "ClientCredentials": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "https://fga.us.auth0.com/oauth/token",
      "scopes": {
        "check:tuples": "Allows checking tuples",
        "expand:tuples": "Allows expanding tuples",
        "read:assertions": "Allows reading assertions",
        "read:authorization_models": "Allows reading authorization models",
        "read:settings": "Allows reading settings",
        "read:tuples": "Allows reading tuples",
        "write:assertions": "Allows updating assertions",
        "write:authorization_models": "Allows writing authorization models",
        "write:settings": "Allows updating settings",
        "write:tuples": "Allows writing tuples"
      }
    }
  }
}
